// <auto-generated />
using System;
using ElectronicShop.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ElectronicShop.Storage.Migrations
{
    [DbContext(typeof(DevicesDataContext))]
    [Migration("20200606161520_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ElectronicShop.Storage.Entity.BattaryFeature", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatureId")
                        .HasColumnName("FeaturesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("battaryCapacity")
                        .HasColumnType("int");

                    b.Property<int>("currentOutput")
                        .HasColumnType("int");

                    b.Property<double>("voltage")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("FeatureId");

                    b.ToTable("BattaryFeatures");
                });

            modelBuilder.Entity("ElectronicShop.Storage.Entity.Category", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnName("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nameofcategory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ElectronicShop.Storage.Entity.Cost", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnName("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("costInDollars")
                        .HasColumnType("float");

                    b.Property<double>("costInRub")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Costs");
                });

            modelBuilder.Entity("ElectronicShop.Storage.Entity.Device", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("tblDevice");
                });

            modelBuilder.Entity("ElectronicShop.Storage.Entity.Feature", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeviceId")
                        .HasColumnName("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("power")
                        .HasColumnType("float");

                    b.Property<double>("warrantyduration")
                        .HasColumnType("float");

                    b.Property<double>("weight")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("ElectronicShop.Storage.Entity.PlaceInTop", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnName("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("highAge")
                        .HasColumnType("int");

                    b.Property<int>("lowAge")
                        .HasColumnType("int");

                    b.Property<int>("middleAge")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("CategoryId");

                    b.ToTable("PlacesInTop");
                });

            modelBuilder.Entity("ElectronicShop.Storage.Entity.ResponsibleConsultant", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnName("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("mark")
                        .HasColumnType("float");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ResponsibleConsultants");
                });

            modelBuilder.Entity("ElectronicShop.Storage.Entity.BattaryFeature", b =>
                {
                    b.HasOne("ElectronicShop.Storage.Entity.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicShop.Storage.Entity.Category", b =>
                {
                    b.HasOne("ElectronicShop.Storage.Entity.Device", "device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicShop.Storage.Entity.Cost", b =>
                {
                    b.HasOne("ElectronicShop.Storage.Entity.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicShop.Storage.Entity.Feature", b =>
                {
                    b.HasOne("ElectronicShop.Storage.Entity.Device", "device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicShop.Storage.Entity.PlaceInTop", b =>
                {
                    b.HasOne("ElectronicShop.Storage.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicShop.Storage.Entity.ResponsibleConsultant", b =>
                {
                    b.HasOne("ElectronicShop.Storage.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
